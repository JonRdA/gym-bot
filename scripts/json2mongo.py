"""
Updates a single training record in MongoDB from a JSON file.

This script is designed to be used with the JSON files generated by the
backup_script.py. It extracts the MongoDB ObjectId from the filename,
reads the JSON content, and uses the MongoService to replace the
document in the database.

Usage:
    python scripts/update_training.py /path/to/your/backup/file.json
"""
import json
import logging
import os
import sys
from pathlib import Path

# Add project root to path to allow importing from services
sys.path.append(str(Path(__file__).resolve().parents[1]))

from config import settings
from services.mongo_service import MongoService

logger = logging.getLogger(__name__)

def update_training_from_file(filepath: str):
    """Reads a JSON file and updates the corresponding MongoDB document."""
    if not os.path.exists(filepath):
        logger.error(f"Error: File not found at '{filepath}'")
        sys.exit(1)

    # --- Extract ObjectId from filename ---
    # Filename format: YYYY-MM-DD_HH-MM-SS_objectid.json
    try:
        filename = os.path.basename(filepath)
        # The ObjectId is the part between the last '_' and '.json'
        training_id = filename.split('_')[-1].replace('.json', '')
        if len(training_id) != 24: # Basic validation for ObjectId
            raise ValueError("Invalid ObjectId format in filename")
    except (IndexError, ValueError) as e:
        logger.error(f"Error: Could not parse training ObjectId from filename '{filename}'.", e)
        logger.error(f"Expected format: YYYY-MM-DD_HH-MM-SS_objectid.json. Details: {e}")
        sys.exit(1)

    # --- Read and parse JSON data ---
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            training_data = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"Error reading or parsing JSON file '{filepath}': {e}", e)
        sys.exit(1)
        
    logger.info(f"Attempting to update training with ID: {training_id}")

    # --- Use MongoService to perform the update ---
    try:
        mongo_service = MongoService()
        success = mongo_service.update_training(training_id, training_data)
        
        if success:
            logger.info("✅ Successfully updated the training record in the database.")
        else:
            logger.info("❌ Failed to update the training record. Check logs for details.")
            
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}", e)
        sys.exit(1)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        logger.info("Usage: python scripts/update_training.py <path_to_json_file>")
        sys.exit(1)
    
    json_file_path = sys.argv[1]
    update_training_from_file(json_file_path)
